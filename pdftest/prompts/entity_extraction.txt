
-Goal-
Given a text document that is potentially relevant to this activity and a list of entity types, identify all entities of those types from the text and all relationships among the identified entities.
 
-Steps-
1. Identify all entities. For each identified entity, extract the following information:
- entity_name: Name of the entity, capitalized
- entity_type: One of the following types: [{entity_types}]
- entity_description: Comprehensive description of the entity's attributes and activities
Format each entity as ("entity"{tuple_delimiter}<entity_name>{tuple_delimiter}<entity_type>{tuple_delimiter}<entity_description>)
 
2. From the entities identified in step 1, identify all pairs of (source_entity, target_entity) that are *clearly related* to each other.
For each pair of related entities, extract the following information:
- source_entity: name of the source entity, as identified in step 1
- target_entity: name of the target entity, as identified in step 1
- relationship_description: explanation as to why you think the source entity and the target entity are related to each other
- relationship_strength: a numeric score indicating strength of the relationship between the source entity and target entity
 Format each relationship as ("relationship"{tuple_delimiter}<source_entity>{tuple_delimiter}<target_entity>{tuple_delimiter}<relationship_description>{tuple_delimiter}<relationship_strength>)
 
3. Return output in Korean as a single list of all the entities and relationships identified in steps 1 and 2. Use **{record_delimiter}** as the list delimiter.
 
4. When finished, output {completion_delimiter}
 
######################
-Examples-
######################
Example 1:
Entity_types: ENTITY
Text:
TCP/IP 프로토콜은 네트워크 통신의 기본이 되는 프로토콜이다. 자바에서는 Socket과 ServerSocket 클래스를 사용하여 TCP/IP 기반의 네트워크 프로그래밍을 할 수 있다. 소켓은 네트워크 상에서 데이터를 주고받는 통로 역할을 한다.
######################
Output:
("entity"{tuple_delimiter}TCP/IP{tuple_delimiter}ENTITY{tuple_delimiter}TCP/IP는 인터넷에서 컴퓨터들이 서로 정보를 주고받는 데 사용되는 통신 규약이다.)
{record_delimiter}
("entity"{tuple_delimiter}소켓{tuple_delimiter}ENTITY{tuple_delimiter}소켓은 네트워크 상에서 데이터를 주고받기 위한 통로를 의미한다.)
{record_delimiter}
("entity"{tuple_delimiter}자바{tuple_delimiter}ENTITY{tuple_delimiter}자바는 객체지향 프로그래밍 언어로, 네트워크 프로그래밍을 위한 클래스를 제공한다.)
{record_delimiter}
("relationship"{tuple_delimiter}자바{tuple_delimiter}TCP/IP{tuple_delimiter}자바는 Socket과 ServerSocket 클래스를 통해 TCP/IP 기반의 네트워크 프로그래밍을 지원한다{tuple_delimiter}8)
{completion_delimiter}

######################
Example 2:
Entity_types: ENTITY
Text:
서버 소켓은 ServerSocket 클래스로 구현되며, accept() 메소드를 통해 클라이언트의 연결 요청을 수락한다. 클라이언트는 Socket 클래스를 이용하여 서버에 연결을 요청하고, getInputStream()과 getOutputStream() 메소드를 통해 데이터를 주고받는다.
######################
Output:
("entity"{tuple_delimiter}ServerSocket{tuple_delimiter}ENTITY{tuple_delimiter}ServerSocket은 자바에서 서버 소켓을 구현하는 클래스이다.)
{record_delimiter}
("entity"{tuple_delimiter}accept(){tuple_delimiter}ENTITY{tuple_delimiter}accept()는 ServerSocket 클래스의 메소드로, 클라이언트의 연결 요청을 수락한다.)
{record_delimiter}
("entity"{tuple_delimiter}클라이언트{tuple_delimiter}ENTITY{tuple_delimiter}클라이언트는 서버에 서비스를 요청하는 네트워크 구성 요소이다.)
{record_delimiter}
("entity"{tuple_delimiter}Socket{tuple_delimiter}ENTITY{tuple_delimiter}Socket은 자바에서 클라이언트 소켓을 구현하는 클래스이다.)
{record_delimiter}
("entity"{tuple_delimiter}getInputStream(){tuple_delimiter}ENTITY{tuple_delimiter}getInputStream()은 Socket 클래스의 메소드로, 서버나 클라이언트로부터 데이터를 읽는다.)
{record_delimiter}
("entity"{tuple_delimiter}getOutputStream(){tuple_delimiter}ENTITY{tuple_delimiter}getOutputStream()은 Socket 클래스의 메소드로, 서버나 클라이언트로부터 데이터를 전송한다.)
{record_delimiter}
("relationship"{tuple_delimiter}ServerSocket{tuple_delimiter}accept(){tuple_delimiter}ServerSocket 클래스는 accept() 메소드를 통해 클라이언트의 연결을 수락한다.{tuple_delimiter}8)
{record_delimiter}
("relationship"{tuple_delimiter}Socket{tuple_delimiter}getInputStream(){tuple_delimiter}Socket 클래스는 getInputStream() 메소드를 통해 서버나 클라이언트로부터 데이터를 읽는다.{tuple_delimiter}8)
{record_delimiter}
("relationship"{tuple_delimiter}Socket{tuple_delimiter}getOutputStream(){tuple_delimiter}Socket 클래스는 getOutputStream() 메소드를 통해 서버나 클라이언트로부터 데이터를 전송한다.{tuple_delimiter}8)
{record_delimiter}
("relationship"{tuple_delimiter}클라이언트{tuple_delimiter}Socket{tuple_delimiter}클라이언트는 Socket 클래스를 사용하여 서버와 연결한다.{tuple_delimiter}7)
{completion_delimiter}


######################
-Real Data-
######################
Entity_types: {entity_types}
Text: {input_text}
######################
Output: